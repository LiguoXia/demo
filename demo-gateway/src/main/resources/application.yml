server:
  port: 8000 # 端口
  servlet:
    encoding:
      charset: UTF-8 # 编码 解决返回乱码
      force: true
      enabled: true
# 应用名
spring:
  application:
    name: demo-gateway
  datasource:
    # url: jdbc:mysql://tidb.6713cf6b.3ce9e91.ap-northeast-1.prod.aws.tidbcloud.com:4000/demo?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8
    # username: root
    # password: demo20201001
    # url: jdbc:mysql://192.168.18.22:3306/demo?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8
    # url: jdbc:mysql://192.168.18.23:3306/fp?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8
    # username: liguo
    # password: xlg123456
    #    hikari:
    #      max-lifetime: 180000
    # 连接池配置
    type: com.alibaba.druid.pool.DruidDataSource
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大(以下配置需要引入Druid Spring Boot Starter)
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://192.168.18.22:3306/demo?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8
      username: liguo
      password: xlg123456
      # 初始化时建立物理连接的个数
      initial-size: 5
      # 最小连接池数量
      min-idle: 5
      # 最大连接池数量
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句
      validation-query: SELECT 1 FROM DUAL
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭
      pool-prepared-statements: true
      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall,slf4j
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

      # druid监控地址 http://localhost:8001/admin/druid/index.html
      web-stat-filter:
        url-pattern: /*

      stat-view-servlet:
        enabled: true
        url-pattern: /admin/druid/*
        reset-enable: false
      filter:
        stat:
          log-slow-sql: true
          slow-sql-millis: 1000
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
eureka:
  client:
    service-url:
      #defaultZone: http://127.0.0.1:8761/eureka
      defaultZone: http://175.178.35.183:8761/eureka
# 网关配置, 网关IP:网关端口/v1/**  >>> 微服务:端口/**
zuul:
  routes:
    demo-core: /v1/**
    demo-consume: /demo-consume/**
  debug:
    request: true  #如果设置了这个，默认所有的请求都会debug
    include-debug-header: true
  # 设置敏感信息不传递到微服务,微服务仅拿到用户信息之类
  sensitive-headers: token
logging:
  level:
    com.netflix: DEBUG

# 在配置文件中开启 hystrix.stream 端点。
# Hystrix Dashboard:  http://localhost:8000/actuator/hystrix.stream
management:
  endpoints:
    web:
      exposure:
        include: "*"
#  endpoint:
#    health:
#      ##默认是never
#      show-details: ALWAYS
#      enabled: true
#    routes:
#      enabled: true
hystrix:
  dashboard:
    proxy-stream-allow-list: "*"